import java.io.*;

public class Solution{

    public static void main(String[] args) {
        int n = 3;
        char[] str = new char[2 * n];
        printParantheses(str, n);
    }

    public static void printParanthesesHelper(char str[], int pos, int n, int open, int close){
        if(close == n){
            for(int i=0; i<str.length; i++){
                System.out.print(str[i]);
            }
            System.out.println();
            return;
        }

        if(open > close){
            str[pos] = ')';
            printParanthesesHelper(str, pos+1, n, open, close+1);
        }

        if(open < n){
            str[pos] = '(';
            printParanthesesHelper(str, pos+1, n, open+1, close);
        }
    }

    public static void printParantheses(char[]str, int n){
        if(n > 0){
            printParanthesesHelper(str, 0, n, 0, 0);
        }
        return;
    }
}

---------------------------------------------------------------------
import java.io.*;
import java.util.ArrayList;

public class Solution{

    public List<String> AllBrackets(int n){
        List<String> ans = new ArrayList<String>();

        printParantheses("", n, 0, 0, ans);
        return ans;
    }

    public void printParantheses(String s, int n, int open, int close, List<String> ans){
        if(close == n){
            ans.add(s);
            return;
        }

        if(open > close) printParantheses(s + ")", n, open, close+1, ans);

        if(open < n) printParantheses(s + "(", n, open+1, close, ans);
    }
}
